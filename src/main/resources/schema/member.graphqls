schema {
    query: Query
    mutation: Mutation
}

# READ
type Query {
    findMemberById(id: Int): Member
    findMembers: [Member] # [] : array
}

type Member {
    id: ID! # ! : non-nullable
    name: String!
    company(company: Company = COMMERCE): Company # default value
    teams: [Team!]!
    createdAt: DateTime!
    phone: String @deprecated(reason: "쿼리가 변경되었어요. realPhone으로 변경했어요.")
}

enum Company {
    COMMERCE
    ACCOMMATE
    WETOO
}

type Team {
    """
    팀번호
    """
    no: ID!
    """
    팀명
    """
    name: String!
    createdAt: DateTime!
}

# CREATE, UPDATE, DELETE
type Mutation {
    createMember(name: String, memberInput: MemberInput): Member
}

input MemberInput {
    company: Company
    teamInput: [TeamInput!]!
}

input TeamInput {
    name: String
}

type Subscription {
    push: PushMessage
}

type PushMessage {
    title(title:String = "기본 타이틀"): String!
    content: String
}

# custom scalar type, DateTime은 dgs에서 자바타입 변환을 위해 미리 선언됨
scalar DateTime

# 추가..
interface Server {
    id: ID!
    ip: String!
}

type CloudServer implements Server {
    id: ID!
    ip: String!
}

type PhysicalServer implements Server {
    id: ID!
    ip: String!
    pricePerSec: Int!
}

union AllServer = CloudServer | PhysicalServer







